# -*- coding: utf-8 -*-
"""Resume.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j836d99fkvsUoKj_fWPgqXKKdWnLfNDf
"""

pip install PyPDF2

import tkinter as tk
from tkinter import filedialog
import os
import PyPDF2
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from google.colab import files

from google.colab import files
import PyPDF2
import ipywidgets as widgets
from IPython.display import display, clear_output

# Simple UI for file uploads
upload_button = widgets.Button(description="Upload PDF Files", button_style='success')
output = widgets.Output()

# Function to upload PDF files
def upload_pdf_file():
    uploaded = files.upload()  # Opens file upload interface in Colab
    pdf_texts = []

    for file_name in uploaded.keys():
        if file_name.lower().endswith('.pdf'):
            print(f"Processing file: {file_name}")  # Debugging step
            text = extract_text_from_pdf(file_name)
            if text:
                pdf_texts.append((file_name, text))
            else:
                print(f"Failed to extract text from: {file_name}")
        else:
            print(f"Invalid file type: {file_name}. Please upload PDF files only.")

    return pdf_texts

# Function to extract text from a PDF file
def extract_text_from_pdf(file_path):
    text = ""
    try:
        with open(file_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            for page in reader.pages:
                if page and page.extract_text():
                    text += page.extract_text()
    except Exception as e:
        print(f"Error reading {file_path}: {e}")
    return text

# Button click event handler
def on_upload_button_clicked(b):
    with output:
        clear_output()
        pdf_texts = upload_pdf_file()
        print(pdf_texts)  # See what we got

upload_button.on_click(on_upload_button_clicked)

# Display the button and output
display(upload_button, output)

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Function to get job description from user
def get_job_description():
    job_description = input("Enter the job description: ")
    return job_description

# Function to rank resumes based on job description
def rank_resumes(job_description, pdf_texts):
    if not pdf_texts:
        print("No resumes to rank.")
        return

    texts = [job_description] + [text for _, text in pdf_texts]
    vectorizer = TfidfVectorizer()
    tfidf_matrix = vectorizer.fit_transform(texts)

    similarity_scores = cosine_similarity(tfidf_matrix[0:1], tfidf_matrix[1:])

    ranked_resumes = sorted(
        zip(pdf_texts, similarity_scores[0]),
        key=lambda x: x[1],
        reverse=True
    )

    print("\nRanked Resumes:")
    for (file_name, _), score in ranked_resumes:
        print(f"{file_name} - Score: {score:.4f}")

# Main workflow
pdf_texts = upload_pdf_file()
job_description = get_job_description()
rank_resumes(job_description, pdf_texts)

from google.colab import files
import ipywidgets as widgets
from IPython.display import display

# Function to upload PDF files
def upload_files():
    print("Please upload your PDF resumes:")
    uploaded = files.upload()  # Opens file upload interface in Colab
    return uploaded

# Simple UI for file uploads
upload_button = widgets.Button(description="Upload PDF Files", button_style='success')
output = widgets.Output()

def on_upload_button_clicked(b):
    with output:
        output.clear_output()
        uploaded_files = upload_files()
        if uploaded_files:
            for file_name in uploaded_files.keys():
                print(f"Uploaded: {file_name}")

upload_button.on_click(on_upload_button_clicked)

# Display the button and output
display(upload_button, output)

